# As of writing this the different environments use the following versions
# of CMake:
# - All macOS images ship with version 3.11.3
# - The Windows environment has version is 3.16.2
# - Both Ubuntu Bionic and Ubuntu Xenial provide version 3.12.4

language: cpp

# Since this is a cross-platform library we want to build on all three of the
# major operating systems.
os:
  - linux
  - osx
  - windows

# We strive to build with relatively new versions of each environment because
# we want to use modern compilers (we need at least C++17, see CMakeLists.txt).
# There is only one environment for Windows so we don't have to choose.
dist: bionic
osx_image: xcode11.2

# The library should not only be cross-platform, it should also not rely on any
# particular compiler.
compiler:
  - clang
  - gcc

jobs:
  exclude:
    # According to the Travis CI docs, gcc is an alias for clang on macOS. So
    # let's be nice to Travis and remove that combination from the build matrix.
    - os: osx
      compiler: gcc
    # The Windows environment uses the MSVC compiler anyway, regardless of
    # which value the compiler key has (that's fine, by the way, the project
    # wants to be compiler-agnostic). As for macOS, let's be nice and remove the
    # unnecessary duplicate from the build matrix.
    - os: Windows
      compiler: gcc

# Our dependencies are covered by Git submodules. We don't have to clone Git
# submodules, Travis already does that by default. Since we have no other
# dependencies we skip the installation phase. Note that this is not strictly
# necessary because for language C++ there isn't a default install.
install: skip

before_script:
  - echo ------------------------------------------------------------
  - echo Patching SGFC
  - echo ------------------------------------------------------------
  - cd sgfc
  - for PATCH_FILE in ../patch/*; do git apply "$PATCH_FILE"; done
  - cd ..
  - echo ------------------------------------------------------------
  - echo Running CMake to create build system
  - echo ------------------------------------------------------------
  - mkdir build
  - cd build
  # All build systems: Specify the configuration for single-configuration build
  # systems like make. For multi-configuration build systems like Visual Studio
  # this has no effect.
  # For bionic: Define the installation prefix at this stage because we can't
  # define it later, because bionic has an old CMake version that does not yet
  # support the --install command line option.
  - if test "$TRAVIS_OS_NAME" = "bionic"; then cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install; else cmake -DCMAKE_BUILD_TYPE=Release ..; fi
  - cd ..

script:
  # Build the project
  - cd build
  # Specify the configuration for multi-configuration build systems like
  # VisualStudio. For single-configuration build systems this would not be
  # necessary since we specified the configuration already when the build
  # system was generated.
  - cmake --build . --config Release
  # Execute unit tests. We could run "ctest", but invoking the Catch2 test
  # runner directly provides better feedback.
  - if test "$TRAVIS_OS_NAME" = "windows"; then ./test/Release/libsgfcplusplus-test; else ./test/libsgfcplusplus-test; fi
  # Perform a dummy deploy to test the CMake install routine. We do it in the
  # script phase (not the deploy phase) so that the build breaks if this fails.
  # See comment above re: use of --config option.
  # For bionic: The CMake version is old and does not yet support --install,
  # so we have to fall back to make. The prefix in this case was defined
  # when the build system was generated in the before_script phase.
  - if test "$TRAVIS_OS_NAME" = "bionic"; then make install; else cmake --install . --config Release --prefix install; fi
