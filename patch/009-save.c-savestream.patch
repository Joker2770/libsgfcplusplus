diff --git a/save.c b/save.c
index b1d7df9..1acd0b1 100644
--- a/save.c
+++ b/save.c
@@ -14,7 +14,9 @@
 #include <math.h>
 
 #include <stdexcept>
+#include <sstream>
 #include <string>
+#include <vector>
 
 extern "C"
 {
@@ -38,10 +40,57 @@ static int save_eol_in_node;
  * them per line, just like we would get without this option set. */
 #define	MAX_PREDICTED_LINELEN	60
 
-#define saveputc(f,c) { if(!WriteChar((f), (c), FALSE))	return(FALSE);	}
+#define saveputc(c) { if(!WriteChar((c), FALSE))	return(FALSE);	}
 
-#define CheckLineLen(s) { if(save_linelen > MAX_LINELEN) \
-						{ saveputc(s, '\n')	} }
+#define CheckLineLen() { if(save_linelen > MAX_LINELEN) \
+						{ saveputc('\n')	} }
+
+
+namespace LibSgfcPlusPlus
+{
+	// All functions that are invoked directly or indirectly from SaveSGF have
+	// been modified to send their output to this stringstream instead of writing
+	// it to a FILE handle. When SaveSGF has finished writing to a file it invokes
+	// CaptureSaveStreamContent() to capture a snapshot of the stream. This
+	// also associates the snapshot with a file name. When SaveSGF has finished
+	// and control returns to libsgfc++, the controlling libsgfc++ object calls
+	// AcquireSaveStreamContents() and AcquireSaveStreamFileNames() to get hold of
+	// the captured SGF content and the associated file names. libsgfc++ then
+	// processes the SGF content as requested by the library client.
+  std::stringstream saveStream("");
+
+	std::vector<std::string> saveStreamContents;
+	std::vector<std::string> saveStreamFileNames;
+
+	void CaptureSaveStreamContent(const std::string& saveStreamFileName)
+	{
+		// libsgfc++ expects the two vectors to contain the same number of elements,
+		// in matching order
+		saveStreamContents.push_back(saveStream.str());
+		saveStreamFileNames.push_back(saveStreamFileName);
+	}
+
+  std::vector<std::string> AcquireSaveStreamContents()
+  {
+		return saveStreamContents;
+  }
+
+  std::vector<std::string> AcquireSaveStreamFileNames()
+  {
+		return saveStreamFileNames;
+  }
+
+  void ResetSaveStreamContentsAndFileNames()
+  {
+		saveStreamContents.clear();
+		saveStreamFileNames.clear();
+	}
+
+  void ResetSaveStream()
+  {
+    saveStream.str("");
+	}
+}
 
 
 /**************************************************************************
@@ -55,7 +104,7 @@ static int save_eol_in_node;
 *** Returns:	TRUE or FALSE
 **************************************************************************/
 
-static int WriteChar(FILE *sfile, char c, int spc)
+static int WriteChar(char c, int spc)
 {
 	save_chars_in_node++;
 
@@ -66,8 +115,7 @@ static int WriteChar(FILE *sfile, char c, int spc)
 	{
 		save_linelen++;
 
-		if(fputc(c, sfile) == EOF)
-			return(FALSE);
+		LibSgfcPlusPlus::saveStream << c;
 	}
 	else
 	{
@@ -75,13 +123,10 @@ static int WriteChar(FILE *sfile, char c, int spc)
 		save_linelen = 0;
 
 #if EOLCHAR
-		if(fputc(EOLCHAR, sfile) == EOF)
-			return(FALSE);
+		LibSgfcPlusPlus::saveStream << EOLCHAR;
 #else
-		if(fputc('\r', sfile) == EOF)		/* MSDOS EndOfLine */
-			return(FALSE);
-		if(fputc('\n', sfile) == EOF)
-			return(FALSE);
+		LibSgfcPlusPlus::saveStream << '\r';		/* MSDOS EndOfLine */
+		LibSgfcPlusPlus::saveStream << '\n';
 #endif
 	}
 
@@ -100,20 +145,20 @@ static int WriteChar(FILE *sfile, char c, int spc)
 *** Returns:	TRUE or FALSE
 **************************************************************************/
 
-static int WritePropValue(char *v, int second, U_SHORT flags, FILE *sfile)
+static int WritePropValue(char *v, int second, U_SHORT flags)
 {
 	U_SHORT fl;
 
 	if(!v)	return(TRUE);
 	
 	if(second)
-		saveputc(sfile, ':');
+		saveputc(':');
 
 	fl = option_softlinebreaks && (flags & SPLIT_SAVE);
 
 	while(*v)
 	{
-		if(!WriteChar(sfile, *v, flags & PVT_SIMPLE))
+		if(!WriteChar(*v, flags & PVT_SIMPLE))
 			return(FALSE);
 
 		if(fl && (save_linelen > MAXTEXT_LINELEN))		/* soft linebreak */
@@ -122,8 +167,8 @@ static int WritePropValue(char *v, int second, U_SHORT flags, FILE *sfile)
 								 /* if we have just written a single '\' then  */
 				v--;					/* treat it as soft linebreak and set  */
 			else						/* v back so that it is written again. */
-				saveputc(sfile, '\\');	/* else insert soft linebreak */
-			saveputc(sfile, '\n');
+				saveputc('\\');	/* else insert soft linebreak */
+			saveputc('\n');
 		}
 
 		v++;
@@ -144,7 +189,7 @@ static int WritePropValue(char *v, int second, U_SHORT flags, FILE *sfile)
 
 static int gi_written = FALSE;
 
-static int WriteProperty(struct TreeInfo *info, struct Property *prop, FILE *sfile)
+static int WriteProperty(struct TreeInfo *info, struct Property *prop)
 {
 	struct PropValue *v;
 	char *p;
@@ -154,8 +199,8 @@ static int WriteProperty(struct TreeInfo *info, struct Property *prop, FILE *sfi
 	{
 		if(!gi_written)
 		{
-			saveputc(sfile, '\n');
-			saveputc(sfile, '\n');
+			saveputc('\n');
+			saveputc('\n');
 		}
 		gi_written = TRUE;
 	}
@@ -166,7 +211,7 @@ static int WriteProperty(struct TreeInfo *info, struct Property *prop, FILE *sfi
 	p = prop->idstr;			/* write property ID */
 	while(*p)
 	{
-		saveputc(sfile, *p);
+		saveputc(*p);
 		p++;
 	}
 
@@ -178,31 +223,31 @@ static int WriteProperty(struct TreeInfo *info, struct Property *prop, FILE *sfi
 
 	while(v)
 	{
-		saveputc(sfile, '[');
+		saveputc('[');
 
 		if(do_tt && !strlen(v->value))
-			WritePropValue("tt", FALSE, prop->flags, sfile);
+			WritePropValue("tt", FALSE, prop->flags);
 		else
 		{
-			WritePropValue(v->value, FALSE, prop->flags, sfile);
-			WritePropValue(v->value2, TRUE, prop->flags, sfile);
+			WritePropValue(v->value, FALSE, prop->flags);
+			WritePropValue(v->value2, TRUE, prop->flags);
 		}
-		saveputc(sfile, ']');
+		saveputc(']');
 
-		CheckLineLen(sfile);
+		CheckLineLen();
 		v = v->next;
 	}
 
 	if(prop->flags & TYPE_GINFO)
 	{
-		saveputc(sfile, '\n');
+		saveputc('\n');
 		if(prop->next)
 		{
 			if(!(prop->next->flags & TYPE_GINFO))
-				saveputc(sfile, '\n');
+				saveputc('\n');
 		}
 		else
-			saveputc(sfile, '\n');
+			saveputc('\n');
 	}
 
 	return(TRUE);
@@ -217,12 +262,12 @@ static int WriteProperty(struct TreeInfo *info, struct Property *prop, FILE *sfi
 *** Returns:	TRUE or FALSE
 **************************************************************************/
 
-static int WriteNode(struct TreeInfo *info, struct Node *n, FILE *sfile)
+static int WriteNode(struct TreeInfo *info, struct Node *n)
 {
 	struct Property *p;
 	save_chars_in_node = 0;
 	save_eol_in_node = 0;
-	saveputc(sfile, ';')
+	saveputc(';')
 
 	p = n->prop;
 	while(p)
@@ -231,7 +276,7 @@ static int WriteNode(struct TreeInfo *info, struct Node *n, FILE *sfile)
 		   (info->GM == 1))
 			CompressPointList(p);
 
-		if(!WriteProperty(info, p, sfile))
+		if(!WriteProperty(info, p))
 			return(FALSE);
 
 		p = p->next;
@@ -241,7 +286,7 @@ static int WriteNode(struct TreeInfo *info, struct Node *n, FILE *sfile)
 	   ((save_eol_in_node && save_linelen > 0) ||
 		(!save_eol_in_node &&
 		 save_linelen > MAX_PREDICTED_LINELEN - save_chars_in_node)))
-		saveputc(sfile, '\n');
+		saveputc('\n');
 
 	return(TRUE);
 }
@@ -282,15 +327,15 @@ static void SetRootProps(struct TreeInfo *info, struct Node *r)
 *** Returns:	TRUE: success / FALSE error
 **************************************************************************/
 
-static int WriteTree(struct TreeInfo *info, struct Node *n, FILE *sfile, int newlines)
+static int WriteTree(struct TreeInfo *info, struct Node *n, int newlines)
 {
 	if(newlines && save_linelen > 0)
-		saveputc(sfile, '\n')
+		saveputc('\n')
 
 	SetRootProps(info, n);
 
-	saveputc(sfile, '(')
-	if(!WriteNode(info, n, sfile))
+	saveputc('(')
+	if(!WriteNode(info, n))
 		return(FALSE);
 
 	n = n->child;
@@ -301,23 +346,23 @@ static int WriteTree(struct TreeInfo *info, struct Node *n, FILE *sfile, int new
 		{
 			while(n)					/* write child + variations */
 			{
-				if(!WriteTree(info, n, sfile, 1))
+				if(!WriteTree(info, n, 1))
 					return(FALSE);
 				n = n->sibling;
 			}
 		}
 		else
 		{
-			if(!WriteNode(info, n, sfile))	/* write child */
+			if(!WriteNode(info, n))	/* write child */
 				return(FALSE);
 			n = n->child;
 		}
 	}
 
-	saveputc(sfile, ')')
+	saveputc(')')
 
 	if(newlines != 1)
-		saveputc(sfile, '\n')
+		saveputc('\n')
 
 	return(TRUE);
 }
@@ -332,7 +377,6 @@ static int WriteTree(struct TreeInfo *info, struct Node *n, FILE *sfile, int new
 
 void SaveSGF(struct SGFInfo *sgf)
 {
-	FILE *sfile;
 	struct Node *n;
 	struct TreeInfo *info;
 	char *c;
@@ -376,20 +420,12 @@ void SaveSGF(struct SGFInfo *sgf)
 			else
 				strcpy(name, sgf->name);
 
-			sfile = fopen(name, "wb");
-			if(!sfile)
-				PrintError(FE_DEST_FILE_OPEN, name);
-
 			if(option_keep_head)
 			{
 				*sgf->start = '\n';
 
 				for(c = sgf->buffer; c <= sgf->start; c++)
-					if(fputc((*c), sfile) == EOF)
-					{
-						fclose(sfile);
-						PrintError(FE_DEST_FILE_WRITE, name);
-					}
+					LibSgfcPlusPlus::saveStream << (*c);
 			}
 
 			save_linelen = 0;
@@ -401,9 +437,14 @@ void SaveSGF(struct SGFInfo *sgf)
 
 			while(n)
 			{
-				if(!WriteTree(info, n, sfile, nl))
+				if(!WriteTree(info, n, nl))
 				{
-					fclose(sfile);
+					// After patching for libsgfc++, WriteTree and its child functions are no
+					// longer writing the SGF content to a file, so this case cannot occur
+					// in reality.
+
+					LibSgfcPlusPlus::CaptureSaveStreamContent(name);
+					LibSgfcPlusPlus::ResetSaveStream();
 					PrintError(FE_DEST_FILE_WRITE, name);
 				}
 
@@ -413,20 +454,19 @@ void SaveSGF(struct SGFInfo *sgf)
 
 				if(option_split_file && n)
 				{
-					fclose(sfile);
+					LibSgfcPlusPlus::CaptureSaveStreamContent(name);
+					LibSgfcPlusPlus::ResetSaveStream();
 
 					if (i == maximumNumberOfGames)
 						PrintError(FE_DEST_NAME_TOO_LONG);
 
 					i++;
 					sprintf(name, formatStringFileName, sgf->name, i);
-
-					if(!(sfile = fopen(name, "wb")))
-						PrintError(FE_DEST_FILE_OPEN, name);
 				}
 			}
 
-			fclose(sfile);
+			LibSgfcPlusPlus::CaptureSaveStreamContent(name);
+			LibSgfcPlusPlus::ResetSaveStream();
 		}
 		catch (...)
 		{
