diff --git a/execute.c b/execute.c
index 589045a..e2b73e6 100644
--- a/execute.c
+++ b/execute.c
@@ -220,12 +220,12 @@ int Do_Addstones(struct Node *n, struct Property *p, struct BoardStatus *st)
 		v = h.value;
 		while(v)
 		{
-			if(x)	fprintf(E_OUTPUT, "[%s]", v->value);
+			if(x)	WriteFormattedStringToLibSgfcPlusPlusMessageStream("[%s]", v->value);
 			v = Del_PropValue(&h, v);
 		}
 
 		if(x)
-			fprintf(E_OUTPUT, "\n");
+			WriteFormattedStringToLibSgfcPlusPlusMessageStream("\n");
 	}
 
 	return(TRUE);
diff --git a/protos.h b/protos.h
index 53a4aff..21b062b 100644
--- a/protos.h
+++ b/protos.h
@@ -135,6 +135,8 @@ struct Node *Del_Node(struct Node *, U_LONG);
 
 struct Property *New_PropValue(struct Node *, token, char *, char *, int);
 
+void WriteFormattedStringToLibSgfcPlusPlusMessageStream(const char* formatString, ...);
+
 
 /**** strict.c ****/
 
diff --git a/util.c b/util.c
index 90b469c..e173526 100644
--- a/util.c
+++ b/util.c
@@ -15,6 +15,7 @@
 #include <string.h>
 
 #include <stdexcept>
+#include <sstream>
 
 extern "C"
 {
@@ -160,6 +161,78 @@ void SearchPos(char *c, struct SGFInfo *sgf, int *x, int *y)
 }
 
 
+namespace LibSgfcPlusPlus
+{
+	// PrintError has been modified to send its output to this stringstream
+	// instead of writing it to E_OUTPUT. When SGFC has finished processing the
+	// SGF content and control returns to libsgfc++, the controlling libsgfc++
+	// object calls AcquireSgfcMessageStream() to get hold of the captured
+	// message stream. libsgfc++ then splits the message stream into lines, each
+	// line representing one message that can be parsed separately.
+	//
+	// A solution that sends individual messages back to libsgfc++ for parsing has
+	// been considered, but found to be more difficult to implement because then
+	// it would be necessary to decide when a message ends and the next one begins.
+	// This is non-trivial, because SGFC has been designed so that one call to
+	// PrintError() can generate only a partial message, i.e. a full message might
+	// need several PrintError() calls. Sometimes PrintError() even calls itself
+	// recursively.
+  std::stringstream messageStream("");
+
+  std::string AcquireSgfcMessageStream()
+  {
+    return messageStream.str();
+  }
+
+  void ResetSgfcMessageStream()
+  {
+    messageStream.str("");
+  }
+
+	// Caller must pass a va_list parameter that has been initialized with
+	// va_start(), and caller must clean up the va_list parameter with va_end().
+	// This function modifies the va_list parameter.
+	void WriteFormattedStringToLibSgfcPlusPlusMessageStream(const char* formatString, va_list arglist)
+	{
+		// Perform a "probing" call to vsnprintf(). We do this so that the function
+		// tells us how long the resulting string would have been, so that we can
+		// allocate a buffer of the correct length. For this we need a copy of
+		// arglist, the copy must be made while the original arglist is still in
+		// its initialized state.
+		va_list arglistCopy;
+		va_copy(arglistCopy, arglist);
+		int lengthOfFormattedStringWithoutNullTerminator = vsnprintf(nullptr, 0, formatString, arglistCopy);
+		va_end(arglistCopy);
+
+		if (lengthOfFormattedStringWithoutNullTerminator >= 0)
+		{
+			size_t bufferSize = lengthOfFormattedStringWithoutNullTerminator + 1;
+			char formattedStringBuffer[bufferSize];
+
+			// No need to call va_start/va-end - that's the responsibility of the caller
+			vsnprintf(formattedStringBuffer, bufferSize, formatString, arglist);
+
+			messageStream << formattedStringBuffer;
+		}
+		else
+		{
+			messageStream
+				<< "WriteFormattedStringToLibSgfcPlusPlusMessageStream error: vsnprintf encountered encoding error, return value was "
+				<< lengthOfFormattedStringWithoutNullTerminator;
+		}
+	}
+}
+
+void WriteFormattedStringToLibSgfcPlusPlusMessageStream(const char* formatString, ...)
+{
+	va_list arglist;
+
+	va_start(arglist, formatString);
+	LibSgfcPlusPlus::WriteFormattedStringToLibSgfcPlusPlusMessageStream(formatString, arglist);
+	va_end(arglist);
+}
+
+
 /**************************************************************************
 *** Function:	PrintError
 ***				Prints an error message to E_OUTPUT (see #define)
@@ -257,17 +330,17 @@ int PrintError(U_LONG type, ...)
 	if(type & E_SEARCHPOS)				/* print position if required */
 	{
 		SearchPos(pos, sgfc, &x, &y);
-		fprintf(E_OUTPUT, "Line:%d Col:%d - ", y, x);
+		LibSgfcPlusPlus::messageStream << "Line:" << y << " Col:" << x << " - ";
 	}
 
 	switch(type & M_ERROR_TYPE)
 	{
-		case E_FATAL_ERROR:	fprintf(E_OUTPUT, "Fatal error %d", (int)(type & M_ERROR_NUM));
+		case E_FATAL_ERROR:	LibSgfcPlusPlus::messageStream << "Fatal error " << (int)(type & M_ERROR_NUM);
 							break;
-		case E_ERROR:		fprintf(E_OUTPUT, "Error %d", (int)(type & M_ERROR_NUM));
+		case E_ERROR:		LibSgfcPlusPlus::messageStream << "Error " << (int)(type & M_ERROR_NUM);
 							error_count++;
 							break;
-		case E_WARNING:		fprintf(E_OUTPUT, "Warning %d", (int)(type & M_ERROR_NUM));
+		case E_WARNING:		LibSgfcPlusPlus::messageStream << "Warning " << (int)(type & M_ERROR_NUM);
 							warning_count++;
 							break;
 	}
@@ -275,40 +348,40 @@ int PrintError(U_LONG type, ...)
 	if(type & E_CRITICAL)
 	{
 		critical_count++;
-		fprintf(E_OUTPUT, " (critical): ");
+		LibSgfcPlusPlus::messageStream << " (critical): ";
 	}
 	else
 		if(type != E_NO_ERROR)
-			fprintf(E_OUTPUT, ": ");
+			LibSgfcPlusPlus::messageStream << ": ";
 
 	if(type != E_NO_ERROR)
 	{
 		/* print error */
-		vfprintf(E_OUTPUT, error_mesg[(type & M_ERROR_NUM)-1], arglist);
+		LibSgfcPlusPlus::WriteFormattedStringToLibSgfcPlusPlusMessageStream(error_mesg[(type & M_ERROR_NUM)-1], arglist);
 
 		if(print_c)					/* print accumulated string? */
 		{
-			putc('"', E_OUTPUT);	/* string is not terminated with '\0'!! */
+			LibSgfcPlusPlus::messageStream << "\"";	/* string is not terminated with '\0'!! */
 			for(; ill_count; ill_count--)
 			{
-				putc(*illegal, E_OUTPUT);
+				LibSgfcPlusPlus::messageStream << (*illegal);
 				illegal++;
 			}
-			fputs("\"\n", E_OUTPUT);
+			LibSgfcPlusPlus::messageStream << "\"\n";
 		}
 
 		if(type & E_ERRNO)			/* print DOS error message? */
 		{
 #ifdef NO_STRERROR					/* strerror() may not be defined! */
-			fprintf(E_OUTPUT, "error code: %d\n", errno);
+			LibSgfcPlusPlus::messageStream << "error code: " << errno << "\n";
 #else
 			char *err;
 
 			err = strerror(errno);
 			if(err)
-				fprintf(E_OUTPUT, "%s\n", err);
+				LibSgfcPlusPlus::messageStream << err << "\n";
 			else
-				fprintf(E_OUTPUT, "error code: %d\n", errno);
+				LibSgfcPlusPlus::messageStream << "error code: " << errno << "\n";
 #endif
 			errno = 0;
 		}
@@ -318,10 +391,10 @@ int PrintError(U_LONG type, ...)
 			pos2 = SkipText(pos, NULL, ']', 0);
 			while(pos <= pos2)
 			{
-				putc(*pos, E_OUTPUT);
+				LibSgfcPlusPlus::messageStream << (*pos);
 				pos++;
 			}
-			putc('\n', E_OUTPUT);
+			LibSgfcPlusPlus::messageStream << "\n";
 		}
 	}
 
@@ -330,7 +403,7 @@ int PrintError(U_LONG type, ...)
 	if((type & M_ERROR_TYPE) == E_FATAL_ERROR)	/* fatal one? */
 	{
 		FreeSGFInfo(sgfc);
-		throw std::runtime_error("PrintError() called with fatal error");
+		throw std::runtime_error(LibSgfcPlusPlus::messageStream.str());
 	}
 
 	return(TRUE);
