diff --git a/execute.c b/execute.c
index e2b73e6..1d35407 100644
--- a/execute.c
+++ b/execute.c
@@ -581,3 +581,10 @@ int Do_View(struct Node *n, struct Property *p, struct BoardStatus *st)
 
 	return(TRUE);
 }
+
+void ResetGlobalVariablesInExecute()
+{
+	// Static variables changed by Capture_Stones et al.
+	memset(path_board, 0, sizeof(path_board));
+	path_num = 0;
+}
diff --git a/main.c b/main.c
index b44c40f..8f72230 100644
--- a/main.c
+++ b/main.c
@@ -295,3 +295,35 @@ int main(int argc, char *argv[])
 	return(ret);
 }
 #endif
+
+void ResetGlobalVariablesInMain()
+{
+	// Non-static variables - these are declared extern in protos.h
+	// LoadSGF, ParseSGF and SaveSGF change this
+	sgfc = NULL;
+	// ParseArgs changes these
+	option_warnings = TRUE;
+	option_keep_head = FALSE;
+	option_keep_unknown_props = TRUE;
+	option_keep_obsolete_props = TRUE;
+	option_del_empty_nodes = FALSE;
+	option_del_move_markup = FALSE;
+	option_split_file = FALSE;
+	option_write_critical = FALSE;
+	option_interactive = FALSE;
+	option_linebreaks = 1;
+	option_softlinebreaks = TRUE;
+	option_nodelinebreaks = FALSE;
+	option_expandcpl = FALSE;
+	option_pass_tt = FALSE;
+	option_fix_variation = FALSE;
+	option_findstart = 1;
+	option_game_signature = FALSE;
+	option_strict_checking = FALSE;
+	option_reorder_variations = FALSE;
+	option_infile = NULL;
+	option_outfile = NULL;
+
+	// No need to reset the static variable sgf because it is changed only by
+	// main(), and libsgfc++ never uses main()
+}
diff --git a/parse2.c b/parse2.c
index afe8f1b..cd38075 100644
--- a/parse2.c
+++ b/parse2.c
@@ -681,9 +681,10 @@ static int GetNumber(struct Node *n, struct Property *p, int value, int *d,
 *** Returns:	-
 **************************************************************************/
 
+static int FF_diff = 0, GM_diff = 0;
+
 static void Init_TreeInfo(struct Node *r)
 {
-	static int FF_diff = 0, GM_diff = 0;
 	struct TreeInfo *ti;
 	struct Property *ff, *gm, *sz;
 
@@ -914,3 +915,12 @@ void ParseSGF(struct SGFInfo *sgf)
 	if(option_strict_checking)
 		Strict_Checking(sgfc);
 }
+
+void ResetGlobalVariablesInParse2()
+{
+	// Static variables used in Init_TreeInfo. Before patching they were locally
+	// declared Init_TreeInfo, now after patching they are globally declared so
+	// that we can access them here.
+	FF_diff = 0;
+	GM_diff = 0;
+}
diff --git a/properties.c b/properties.c
index 02b022b..1be027f 100644
--- a/properties.c
+++ b/properties.c
@@ -160,3 +160,15 @@ struct SGFToken sgf_token[] =
 
 	{ NULL,	0,	0,		NULL,			NULL,	0, 0 }
 };
+
+void ResetGlobalVariablesInProperties(void)
+{
+	// Non-static variable - this is declared extern in protos.h
+	int indexOfProperty = 0;
+	while (sgf_token[indexOfProperty].id != NULL)
+	{
+		// The -y option adds DELETE_PROP
+		sgf_token[indexOfProperty].flags &= ~DELETE_PROP;
+		indexOfProperty++;
+	}
+}
diff --git a/protos.h b/protos.h
index c910700..5ea0d40 100644
--- a/protos.h
+++ b/protos.h
@@ -36,6 +36,8 @@ extern char *option_outfile;
 
 int ParseArgs(int argc, char *argv[]);
 
+void ResetGlobalVariablesInMain(void);
+
 
 /**** load.c ****/
 
@@ -53,11 +55,15 @@ void LoadSGF(struct SGFInfo * );
 
 void SaveSGF(struct SGFInfo * );
 
+void ResetGlobalVariablesInSave(void);
+
 
 /**** properties.c ****/
 
 extern struct SGFToken sgf_token[];
 
+void ResetGlobalVariablesInProperties(void);
+
 
 /**** parse.c ****/
 
@@ -86,6 +92,8 @@ void CompressPointList(struct Property * );
 void Split_Node(struct Node *, U_SHORT, token, int);
 void ParseSGF(struct SGFInfo * );
 
+void ResetGlobalVariablesInParse2(void);
+
 
 /**** execute.c ****/
 
@@ -99,6 +107,8 @@ int Do_Root(struct Node *, struct Property *, struct BoardStatus *);
 int Do_GInfo(struct Node *, struct Property *, struct BoardStatus *);
 int Do_View(struct Node *, struct Property *, struct BoardStatus *);
 
+void ResetGlobalVariablesInExecute(void);
+
 
 /**** gameinfo.c ****/
 
@@ -138,6 +148,7 @@ struct Node *Del_Node(struct Node *, U_LONG);
 struct Property *New_PropValue(struct Node *, token, char *, char *, int);
 
 void WriteFormattedStringToLibSgfcPlusPlusMessageStream(const char* formatString, ...);
+void ResetGlobalVariablesInUtil(void);
 
 
 /**** strict.c ****/
diff --git a/save.c b/save.c
index ed9f946..23baffd 100644
--- a/save.c
+++ b/save.c
@@ -135,10 +135,10 @@ static int WritePropValue(char *v, int second, U_SHORT flags, FILE *sfile)
 *** Returns:	TRUE or FALSE
 **************************************************************************/
 
+static int gi_written = FALSE;
+
 static int WriteProperty(struct TreeInfo *info, struct Property *prop, FILE *sfile)
 {
-	static int gi_written = FALSE;
-
 	struct PropValue *v;
 	char *p;
 	int do_tt;
@@ -389,3 +389,18 @@ void SaveSGF(struct SGFInfo *sgf)
 
 	fclose(sfile);
 }
+
+void ResetGlobalVariablesInSave()
+{
+	// Static variables changed by WriteChar et al.
+	// Resetting these is not strictly necessary because SaveSGF already resets
+	// them.
+	save_linelen = 0;
+	save_chars_in_node = 0;
+	save_eol_in_node = 0;
+
+	// Static variable used in WriteProperty. Before patching it was locally
+	// declared WriteProperty, now after patching it is globally declared so
+	// that we can access it here.
+	gi_written = FALSE;
+}
diff --git a/util.c b/util.c
index 1bac533..5107b0e 100644
--- a/util.c
+++ b/util.c
@@ -255,13 +255,14 @@ void WriteFormattedStringToLibSgfcPlusPlusMessageStream(const char* formatString
 ***				(may quit program, if error is fatal!)
 **************************************************************************/
 
+static char *illegal, *last_pos;
+static int ill_count = 0;
+static U_LONG ill_type = E_NO_ERROR, last_type;
+
 int PrintError(U_LONG type, ...)
 {
 	int x, y, print_c = 0;
 	char *pos = NULL, *pos2;
-	static char *illegal, *last_pos;
-	static int ill_count = 0;
-	static U_LONG ill_type = E_NO_ERROR, last_type;
 	va_list arglist;
 
 	va_start(arglist, type);
@@ -898,3 +899,26 @@ struct Property *New_PropValue(struct Node *n, token id,
 
 	return(p);
 }
+
+void ResetGlobalVariablesInUtil()
+{
+	// Non-static variables - these are declared extern in protos.h
+	// Counters are increased by PrintError
+	error_count = 0;
+	critical_count = 0;
+	warning_count = 0;
+	ignored_count = 0;
+	// The -d option disables errors
+	memset(error_enabled, TRUE, sizeof(error_enabled));
+
+	// Static variables used in PrintError. Before patching they were locally
+	// declared PrintError, now after patching they are globally declared so
+	// that we can access them here.
+	illegal = nullptr;
+	last_pos = nullptr;
+	ill_count = 0;
+	ill_type = E_NO_ERROR;
+	last_type = E_NO_ERROR;
+
+	// No need to reset the static variable error_mesg because it is never changed
+}
