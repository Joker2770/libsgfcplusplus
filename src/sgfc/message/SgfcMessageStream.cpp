// -----------------------------------------------------------------------------
// Copyright 2020 Patrick NÃ¤f (herzbube@herzbube.ch)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

// Project includes
#include "../../SgfcPrivateConstants.h"
#include "../../SgfcUtility.h"
#include "SgfcMessageStream.h"

// C++ Standardd Library includes
//#include <sstream>

namespace LibSgfcPlusPlus
{
  // ----------------------------------------------------------------------
  // Function prototypes used to interact with SGFC.
  // ----------------------------------------------------------------------

  /// @brief Acquires the message stream that was generated by SGFC during its
  /// most recent parsing of SGF content.
  ///
  /// This is a function prototype. The function is defined in SGFC, in the
  /// modified util.c.
  std::string AcquireSgfcMessageStream();

  /// @brief Resets the message stream stored in SGFC so that SGFC starts with
  /// a clean slate when it parses SGF content the next time.
  ///
  /// This is a function prototype. The function is defined in SGFC, in the
  /// modified util.c.
  void ResetSgfcMessageStream();

  // ----------------------------------------------------------------------
  // The SgfcMessageStream class.
  // ----------------------------------------------------------------------

  SgfcMessageStream::SgfcMessageStream()
    : rawMessageStreamContent(SgfcPrivateConstants::EmptyString)
    , messageStreamLines()
  {
    // TODO sgfc reintegration: review commented code
//    this->rawMessageStreamContent = AcquireSgfcMessageStream();
    SplitRawMessageStreamContentIntoLines();

    // TODO sgfc reintegration: review commented code
//    ResetSgfcMessageStream();
  }

  SgfcMessageStream::~SgfcMessageStream()
  {
  }

  void SgfcMessageStream::SplitRawMessageStreamContentIntoLines()
  {
    // The SGFC function PrintError() exclusively uses newline characters to
    // delimit lines. This is a bit surprising, since SGFC has support for
    // flexible line endings when it writes SGF content to a file. If this
    // changes in a future SGFC implementation and PrintError() starts to
    // use flexible line endings, too, then we will no longer be able to use
    // std::getline(), as that supports only a single character as the line
    // ending, but on Windows we can have two characters (CRLF). Note that in
    // that case we can use SgfcPrivateConstants::EndOfLineStringUsedBySgfc to
    // find out what line ending SGFC uses.
    this->messageStreamLines = SgfcUtility::SplitString(
      this->rawMessageStreamContent,
      SgfcPrivateConstants::NewlineCharacter);
  }

  std::vector<std::string> SgfcMessageStream::GetMessageStreamLines() const
  {
    return this->messageStreamLines;
  }

  std::string SgfcMessageStream::GetRawMessageStreamContent() const
  {
    return this->rawMessageStreamContent;
  }
}
