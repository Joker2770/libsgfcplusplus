// Project includes
#include "../../../include/SgfcConstants.h"
#include "SgfcMessage.h"

// C++ Standard Library includes
#include <stdexcept>

namespace LibSgfcPlusPlus
{
  SgfcMessage::SgfcMessage(
    int messageID,
    SgfcMessageType messageType,
    int lineNumber,
    int columnNumber,
    bool isCriticalMessage,
    const std::string& messageText,
    const std::string& rawMessageText)
    : messageID(messageID)
    , messageType(messageType)
    , lineNumber(lineNumber)
    , columnNumber(columnNumber)
    , isCriticalMessage(isCriticalMessage)
    , messageText(messageText)
    , rawMessageText(rawMessageText)
  {
    if (messageID < 0)
      throw std::invalid_argument("SgfcMessage constructor failed: Message ID is a negative number. This constructor is reserved for messages generated by SGFC.");

    if (messageType == SgfcMessageType::FatalError)
    {
      if (lineNumber != SgfcConstants::InvalidLineNumber)
        throw std::invalid_argument("SgfcMessage constructor failed: Line number is not SgfcConstants::InvalidLineNumber although message type is SgfcMessageType::FatalError");

      if (columnNumber != SgfcConstants::InvalidColumnNumber)
        throw std::invalid_argument("SgfcMessage constructor failed: Column number is not SgfcConstants::InvalidColumnNumber although message type is SgfcMessageType::FatalError");

      if (isCriticalMessage)
        throw std::invalid_argument("SgfcMessage constructor failed: Message is marked as critical although message type is SgfcMessageType::FatalError");
    }
    else
    {
      if (lineNumber < 1)
        throw std::invalid_argument("SgfcMessage constructor failed: Line number is < 1 although message type is not SgfcMessageType::FatalError");

      if (columnNumber < 1)
        throw std::invalid_argument("SgfcMessage constructor failed: Column number is < 1 although message type is not SgfcMessageType::FatalError");
    }
  }

  SgfcMessage::SgfcMessage(
    int messageID,
    const std::string& messageText)
    : messageID(messageID)
    , messageType(SgfcMessageType::FatalError)
    , lineNumber(SgfcConstants::InvalidLineNumber)
    , columnNumber(SgfcConstants::InvalidColumnNumber)
    , isCriticalMessage(false)
    , messageText(messageText)
    , rawMessageText(messageText)
  {
    if (messageID >= 0)
      throw std::invalid_argument("SgfcMessage constructor failed: Message ID is zero or a positive number. This constructor is reserved for messages generated by libsgfc++.");
  }

  SgfcMessage::~SgfcMessage()
  {
  }

  int SgfcMessage::GetMessageID() const
  {
    return this->messageID;
  }

  SgfcMessageType SgfcMessage::GetMessageType() const
  {
    return this->messageType;
  }

  int SgfcMessage::GetLineNumber() const
  {
    return this->lineNumber;
  }

  int SgfcMessage::GetColumnNumber() const
  {
    return this->columnNumber;
  }

  bool SgfcMessage::IsCriticalMessage() const
  {
    return this->isCriticalMessage;
  }

  std::string SgfcMessage::GetMessageText() const
  {
    return this->messageText;
  }

  std::string SgfcMessage::GetRawMessageText() const
  {
    return this->rawMessageText;
  }
}
