// -----------------------------------------------------------------------------
// Copyright 2020 Patrick NÃ¤f (herzbube@herzbube.ch)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

// Project includes
#include "../../SgfcPrivateConstants.h"
#include "SgfcSaveStream.h"
#include "SgfcSgfContent.h"

namespace LibSgfcPlusPlus
{
  // ----------------------------------------------------------------------
  // Function prototypes used to interact with SGFC.
  // ----------------------------------------------------------------------

  /// @brief Acquires the captured save stream snapshots that were generated by
  /// SGFC during its most recent save operation.
  ///
  /// This is a function prototype. The function is defined in SGFC, in the
  /// modified save.c.
  std::vector<std::string> AcquireSaveStreamContents();

  /// @brief Acquires the file names generated by SGFC during its most recent
  /// save operation.
  ///
  /// This is a function prototype. The function is defined in SGFC, in the
  /// modified save.c.
  std::vector<std::string> AcquireSaveStreamFileNames();

  /// @brief Resets the captured save stream snapshots and associated file names
  /// stored in SGFC so that SGFC starts with a clean slate when it performs a
  /// save operation the next time.
  ///
  /// This is a function prototype. The function is defined in SGFC, in the
  /// modified save.c.
  void ResetSaveStreamContentsAndFileNames();

  // ----------------------------------------------------------------------
  // The SgfcSaveStream class.
  // ----------------------------------------------------------------------

  SgfcSaveStream::SgfcSaveStream()
  {
    // TODO sgfc reintegration: review commented code
//    std::vector<std::string> saveStreamContents = AcquireSaveStreamContents();
//    std::vector<std::string> saveStreamFileNames = AcquireSaveStreamFileNames();
//    MakeSgfContents(saveStreamContents, saveStreamFileNames);
//
//    ResetSaveStreamContentsAndFileNames();
  }

  SgfcSaveStream::~SgfcSaveStream()
  {
  }

  std::vector<std::shared_ptr<ISgfcSgfContent>> SgfcSaveStream::GetSgfContents() const
  {
    return this->sgfContents;
  }

  void SgfcSaveStream::MakeSgfContents(
    const std::vector<std::string>& saveStreamContents,
    const std::vector<std::string>& saveStreamFileNames)
  {
    auto itSaveStreamContents = saveStreamContents.cbegin();
    auto itSaveStreamFileNames = saveStreamFileNames.cbegin();

    // We know that the two vectors contain the same number of elements, in
    // matching order
    while (itSaveStreamContents != saveStreamContents.cend() &&
           itSaveStreamFileNames != saveStreamFileNames.cend())
    {
      const std::string& saveStreamContent = *itSaveStreamContents;
      const std::string& saveStreamFileName = *itSaveStreamFileNames;

      std::shared_ptr<ISgfcSgfContent> sgfContent = std::shared_ptr<ISgfcSgfContent>(new SgfcSgfContent(
        saveStreamContent,
        saveStreamFileName));

      // Preserve order in which SGFC generated SGF content
      this->sgfContents.push_back(sgfContent);

      ++itSaveStreamContents;
      ++itSaveStreamFileNames;
    }
  }
}
