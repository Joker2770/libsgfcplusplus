// -----------------------------------------------------------------------------
// Copyright 2020 Patrick NÃ¤f (herzbube@herzbube.ch)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

#pragma once

// C++ Standard Library includes
#include <memory>
#include <vector>

// Forward declarations
struct SaveFileHandler;

namespace LibSgfcPlusPlus
{
  // Forward declarations
  class SgfcSgfContent;

  /// @brief The SgfcSaveStream class captures the stream of save data that
  /// is generated by SGF.
  ///
  /// @ingroup internals
  /// @ingroup sgfc-backend
  ///
  /// The capturing process does not depend on a particular instance of
  /// SgfcSaveStream. It is based on global/static functions and variables that
  /// are hidden behind the facade of SgfcSaveStream. However, an instance of
  /// SgfcSaveStream is required to access the captured data.
  ///
  /// An actor that wants to perform an SGFC save operation invokes the static
  /// function CreateSaveFileHandler(). This returns a structure that the actor
  /// can then pass to the SGFC global function SaveSGF() to start the save
  /// operation. SaveSGF() will free the memory allocated for the structure, so
  /// it is good only for a single save operation.
  ///
  /// Before the actor starts the save operation, though, it must construct an
  /// SgfcSaveStream object. Upon construction this clears all data captured
  /// from previous save operations.
  ///
  /// While SaveSGF() runs it invokes various callback functions, pointers to
  /// which were stored in the structure created by CreateSaveFileHandler. The
  /// callback functions are internals of SgfcSaveStream that handle the
  /// capturing process.
  ///
  /// After the save operation has finished the actor can access the captured
  /// save data by invoking the GetSgfContents() method. When SgfcSaveStream is
  /// destroyed the actor no longer has access to the captured data.
  ///
  /// Only one SgfcSaveStream can be active at any given time.
  ///
  /// An SgfcSaveStream object that is left alive can capture the results of
  /// multiple save operations. GetSgfContents() returns all save data that was
  /// captured during the entire lifetime of the SgfcSaveStream object.
  class SgfcSaveStream
  {
  public:
    /// @brief Initializes a newly constructed SgfcSaveStream object.
    /// The object clears all data captured from previous save operations.
    ///
    /// @exception std::logic_error Is thrown if another SgfcSaveStream
    /// object already exists.
    SgfcSaveStream();

    /// @brief Destroys and cleans up the SgfcSaveStream object.
    virtual ~SgfcSaveStream();

    /// @brief Returns a newly allocated SaveFileHandler structure that can be
    /// passed to the SGFC global function SaveSGF(). The structure is good
    /// only for a single invocation of SaveSGF() because SaveSGF() frees the
    /// memory allocated for the SaveFileHandler structure. If the caller does
    /// not invoke SaveSGF() it becomes responsible for freeing the
    /// SaveFileHandler structure.
    static SaveFileHandler* CreateSaveFileHandler();

    /// @brief Returns a collection of save data captured so far by the
    /// SgfcSaveStream object. The save data objects appear in the collection
    /// in the order in which they are generated by SGFC. The collection is
    /// empty if SGFC has not generated any save data.
    std::vector<std::shared_ptr<SgfcSgfContent>> GetSgfContents() const;
  };
}
