include( ${CMAKE_CURRENT_SOURCE_DIR}/${SOURCES_LIST_FILE_NAME} )
if ( NOT DEFINED SOURCES )
  message ( FATAL_ERROR "List of source files not defined by ${CMAKE_CURRENT_SOURCE_DIR}/${SOURCES_LIST_FILE_NAME}" )
endif()
if ( NOT DEFINED OUTPUT_DIRECTORIES )
  message ( FATAL_ERROR "List of output directories not defined by ${CMAKE_CURRENT_SOURCE_DIR}/${SOURCES_LIST_FILE_NAME}" )
endif()

# We don't care about sub-components of Doxygen (e.g. dot). Because we don't
# mention them here they are treated as optional.
find_package ( Doxygen )

if ( ${DOXYGEN_FOUND} )

  # Variables prefixed with "DOXYGEN_" will cause doxygen_add_docs() to set the
  # corresponding setting in the generated Doxygen configuration file to the
  # variable's value. Example: "DOXYGEN_FOO=bar" will cause "FOO=bar" in the
  # Doxygen config file.
  #
  # Variables which we expect doxygen_add_docs() to set up on its own:
  # - DOXYGEN_PROJECT_NAME = PROJECT_NAME
  # - DOXYGEN_PROJECT_NUMBER = PROJECT_VERSION
  # - DOXYGEN_PROJECT_BRIEF = PROJECT_DESCRIPTION
  # - DOXYGEN_GENERATE_LATEX = NO
  # - DOXYGEN_RECURSIVE = YES
  # - DOXYGEN_OUTPUT_DIRECTORY = CMAKE_CURRENT_BINARY_DIR
  set ( DOXYGEN_IGNORE_PREFIX ISgfc, Sgfc )
  set ( DOXYGEN_USE_MDFILE_AS_MAINPAGE ../README.md )
  # The following three variables are needed so that Doxygen generates
  # documentation for exported enum class types.
  #
  # The preprocessor macro used for declaring symbol visibility is defined in
  # file SgfcPlusPlusExport.h, which is generated by CMake. Doxygen does not
  # know where to look for SgfcPlusPlusExport.h, so it does not know the value
  # of the macro. For regular classes this does not seem to be a problem, but
  # for C++11 enum classes Doxygen somehow can't deal with the unresolved macro.
  # The result is that Doxygen prints this warning
  #   documented symbol ... was not declared or defined
  # and does not generate documentation for the enumeration.
  #
  # One way how to solve this is to add the search path where to look for
  # SgfcPlusPlusExport.h in the INCLUDE_PATH tag. This could be as simple as
  #   set ( DOXYGEN_INCLUDE_PATH ../src )
  # This relative path should work because both the software build and Doxygen
  # are run within the same CMake-managed base build directory. The main
  # argument against setting INCLUDE_PATH is that it should be possible to
  # generate the documentation without having previously built the software,
  # which means that doc generation cannot rely on SgfcPlusPlusExport.h being
  # present.
  # 
  # The solution therefore is to configure Doxygen to have its own definition of
  # the macro. Since the macro value is not relevant for the generated
  # documentation the macro can be simply defined without a value.
  set ( DOXYGEN_MACRO_EXPANSION YES )
  set ( DOXYGEN_EXPAND_ONLY_PREDEF YES )
  set ( DOXYGEN_PREDEFINED ${EXPORT_HEADER_SYMBOL_VISIBILITY_MACRO_NAME} )

  # This constructs a Doxyfile and defines a custom target that runs Doxygen on
  # that generated file. Files listed explicitly as input are added as SOURCES
  # of the custom target so they will show up in an IDE project's source list.
  # We don't specify the parameter ALL because we don't want the documentation
  # to be built automatically every time a build is made.
  doxygen_add_docs (
    ${DOCUMENTATION_TARGET_NAME}
    ${SOURCES}
  )

  # Because the documentation-generating target set up by doxygen_add_docs()
  # above is not part of ALL, the files to be installed here must also be marked
  # with EXCLUDE_FROM_ALL. Instead we associate them with a component that has
  # the same name as the doc target so that they can be installed with the
  # command line option --component.
  install (
    DIRECTORY ${OUTPUT_DIRECTORIES}
    TYPE DOC
    COMPONENT ${DOCUMENTATION_TARGET_NAME}
    EXCLUDE_FROM_ALL
  )

endif()
